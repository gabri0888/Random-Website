<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Game</title>
    <style>
        body {
            overflow: hidden;
            margin: 0;
        }

        canvas {
            display: block;
        }
    </style>
</head>
<body>

    <canvas id="gameCanvas" width="800" height="600"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const player = {
            x: 50,
            y: canvas.height / 2,
            width: 50,
            height: 50,
            speed: 5,
            health: 3,
            eliminations: 0,
        };

        let bullets = [];
        let enemies = [];

        function drawPlayer() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        function drawBullets() {
            ctx.fillStyle = 'red';
            bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }

        function drawEnemies() {
            enemies.forEach(enemy => {
                ctx.fillStyle = enemy.isYellow ? 'yellow' : 'green';
                ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            });
        }

        function drawStats() {
            ctx.fillStyle = 'black';
            ctx.font = '20px Arial';
            ctx.fillText('Eliminazioni: ' + player.eliminations, 10, 30);
        }

        function update() {
            // Update logic for player movement, bullets, and enemies

            // Move player with WASD keys
            if (keys.w && player.y > 0) {
                player.y -= player.speed;
            }
            if (keys.s && player.y < canvas.height - player.height) {
                player.y += player.speed;
            }
            if (keys.a && player.x > 0) {
                player.x -= player.speed;
            }
            if (keys.d && player.x < canvas.width - player.width) {
                player.x += player.speed;
            }

            // Shoot bullets with the "F" key
            if (keys.f) {
                bullets.push({
                    x: player.x + player.width,
                    y: player.y + player.height / 2 - 5,
                    width: 10,
                    height: 10,
                    speed: 10,
                });
                keys.f = false; // Prevent continuous firing
            }

            // Move bullets
            bullets = bullets.filter(bullet => {
                bullet.x += bullet.speed;
                return bullet.x < canvas.width;
            });

            // Spawn enemies
            if (Math.random() < 0.02) {
                const isYellow = Math.random() < 0.1; // 10% chance to be yellow
                enemies.push({
                    x: canvas.width,
                    y: Math.random() * (canvas.height - 30),
                    width: 30,
                    height: 30,
                    health: isYellow ? 1 : 3,
                    isYellow,
                    speed: isYellow ? 2 : 3,
                });
            }

            // Move enemies
            enemies.forEach(enemy => {
                enemy.x -= enemy.speed;

                // Check for collision with player
                if (
                    player.x < enemy.x + enemy.width &&
                    player.x + player.width > enemy.x &&
                    player.y < enemy.y + enemy.height &&
                    player.y + player.height > enemy.y
                ) {
                    // Game over if player touches a green enemy
                    if (!enemy.isYellow) {
                        alert("Game Over!");
                        resetGame();
                    } else {
                        // Increase player speed on collision with a yellow enemy
                        player.speed += 2;
                        // Remove yellow enemy
                        enemies = enemies.filter(e => e !== enemy);
                    }
                }

                // Check for collision with bullets
                bullets.forEach(bullet => {
                    if (
                        bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.y + bullet.height > enemy.y
                    ) {
                        // Reduce enemy health on hit
                        enemy.health--;

                        // Remove bullet on hit
                        bullets = bullets.filter(b => b !== bullet);

                        // Remove enemy if health is zero
                        if (enemy.health === 0) {
                            enemies = enemies.filter(e => e !== enemy);
                            player.eliminations++;
                        }
                    }
                });
            });
        }

        function draw() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw player, bullets, enemies, and stats
            drawPlayer();
            drawBullets();
            drawEnemies();
            drawStats();
        }

        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        function resetGame() {
            player.x = 50;
            player.y = canvas.height / 2;
            player.speed = 5;
            bullets = [];
            enemies = [];
            player.eliminations = 0;
        }

        // Keyboard input handling
        const keys = {};
        window.addEventListener('keydown', e => keys[e.key.toLowerCase()] = true);
        window.addEventListener('keyup', e => keys[e.key.toLowerCase()] = false);

        // Start the game loop
        gameLoop();
    </script>
</body>
</html>
